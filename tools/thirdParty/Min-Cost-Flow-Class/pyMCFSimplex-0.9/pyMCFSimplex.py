# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
* Linear and Quadratic Min Cost Flow problems solver based on the (primal and
 * dual) simplex algorithm. Conforms to the standard MCF interface defined in
 * MCFClass.h.
 *
 * Version 1.00
 *
 * date 29 - 08 - 2011
 *
 * author Alessandro Bertolini 

 *         Antonio Frangioni 

 *         Operations Research Group 

 *         Dipartimento di Informatica 

 *         Universita' di Pisa 

 *
 * Copyright &copy 2008 - 2011 by Alessandro Bertolini, Antonio Frangioni
 *
 * Made available through SWIG: 
 * 		Johannes Sommer, 2013
 *		G#.Blog
 *		www.sommer-forst/blog
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyMCFSimplex', [dirname(__file__)])
        except ImportError:
            import _pyMCFSimplex
            return _pyMCFSimplex
        if fp is not None:
            try:
                _mod = imp.load_module('_pyMCFSimplex', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyMCFSimplex = swig_import_helper()
    del swig_import_helper
else:
    import _pyMCFSimplex
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def version():
	d = {}
	d["MCFSimplex"] = "1.0"
	d["pyMCFSimplex"] = "0.9"
	return d


def new_darray(*args):
  return _pyMCFSimplex.new_darray(*args)
new_darray = _pyMCFSimplex.new_darray

def darray_get(*args):
  return _pyMCFSimplex.darray_get(*args)
darray_get = _pyMCFSimplex.darray_get

def darray_set(*args):
  return _pyMCFSimplex.darray_set(*args)
darray_set = _pyMCFSimplex.darray_set

def new_uiarray(*args):
  return _pyMCFSimplex.new_uiarray(*args)
new_uiarray = _pyMCFSimplex.new_uiarray

def uiarray_get(*args):
  return _pyMCFSimplex.uiarray_get(*args)
uiarray_get = _pyMCFSimplex.uiarray_get

def uiarray_set(*args):
  return _pyMCFSimplex.uiarray_set(*args)
uiarray_set = _pyMCFSimplex.uiarray_set
# Turn a Python list into a C double array
def CreateDoubleArrayFromList(l):
	d = new_darray(len(l))
	for i in range(0,len(l)):
		darray_set(d,i,l[i])
	return d
# Turn a Python list into a C unsigned int array
def CreateUIntArrayFromList(l):
	ui = new_uiarray(len(l))
	for i in range(0,len(l)):
		uiarray_set(ui,i,l[i])
	return ui
# Print out some elements of a double array
def PrintElements(a, first, last):
	for i in range(first,last):
		print darray_get(a,i)
		
# Print out some elements of an uint array
def PrintElements(a, first, last):
	for i in range(first,last):
		print uiarray_get(a,i)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyMCFSimplex.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyMCFSimplex.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyMCFSimplex.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyMCFSimplex.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyMCFSimplex.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyMCFSimplex.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyMCFSimplex.SwigPyIterator_copy(self)
    def next(self): return _pyMCFSimplex.SwigPyIterator_next(self)
    def __next__(self): return _pyMCFSimplex.SwigPyIterator___next__(self)
    def previous(self): return _pyMCFSimplex.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyMCFSimplex.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyMCFSimplex.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyMCFSimplex.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyMCFSimplex.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyMCFSimplex.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyMCFSimplex.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyMCFSimplex.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyMCFSimplex.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class wstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wstring, name)
    __repr__ = _swig_repr
    def length(self): return _pyMCFSimplex.wstring_length(self)
    def max_size(self): return _pyMCFSimplex.wstring_max_size(self)
    def capacity(self): return _pyMCFSimplex.wstring_capacity(self)
    def reserve(self, __res_arg = 0): return _pyMCFSimplex.wstring_reserve(self, __res_arg)
    def copy(self, *args): return _pyMCFSimplex.wstring_copy(self, *args)
    def c_str(self): return _pyMCFSimplex.wstring_c_str(self)
    def find(self, *args): return _pyMCFSimplex.wstring_find(self, *args)
    def rfind(self, *args): return _pyMCFSimplex.wstring_rfind(self, *args)
    def find_first_of(self, *args): return _pyMCFSimplex.wstring_find_first_of(self, *args)
    def find_last_of(self, *args): return _pyMCFSimplex.wstring_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _pyMCFSimplex.wstring_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _pyMCFSimplex.wstring_find_last_not_of(self, *args)
    def substr(self, *args): return _pyMCFSimplex.wstring_substr(self, *args)
    def empty(self): return _pyMCFSimplex.wstring_empty(self)
    def size(self): return _pyMCFSimplex.wstring_size(self)
    def swap(self, *args): return _pyMCFSimplex.wstring_swap(self, *args)
    def get_allocator(self): return _pyMCFSimplex.wstring_get_allocator(self)
    def begin(self): return _pyMCFSimplex.wstring_begin(self)
    def end(self): return _pyMCFSimplex.wstring_end(self)
    def rbegin(self): return _pyMCFSimplex.wstring_rbegin(self)
    def rend(self): return _pyMCFSimplex.wstring_rend(self)
    def erase(self, *args): return _pyMCFSimplex.wstring_erase(self, *args)
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_wstring(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pyMCFSimplex.wstring_assign(self, *args)
    def resize(self, *args): return _pyMCFSimplex.wstring_resize(self, *args)
    def iterator(self): return _pyMCFSimplex.wstring_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyMCFSimplex.wstring___nonzero__(self)
    def __bool__(self): return _pyMCFSimplex.wstring___bool__(self)
    def __len__(self): return _pyMCFSimplex.wstring___len__(self)
    def __getslice__(self, *args): return _pyMCFSimplex.wstring___getslice__(self, *args)
    def __setslice__(self, *args): return _pyMCFSimplex.wstring___setslice__(self, *args)
    def __delslice__(self, *args): return _pyMCFSimplex.wstring___delslice__(self, *args)
    def __delitem__(self, *args): return _pyMCFSimplex.wstring___delitem__(self, *args)
    def __getitem__(self, *args): return _pyMCFSimplex.wstring___getitem__(self, *args)
    def __setitem__(self, *args): return _pyMCFSimplex.wstring___setitem__(self, *args)
    def insert(self, *args): return _pyMCFSimplex.wstring_insert(self, *args)
    def replace(self, *args): return _pyMCFSimplex.wstring_replace(self, *args)
    def __iadd__(self, *args): return _pyMCFSimplex.wstring___iadd__(self, *args)
    def __add__(self, *args): return _pyMCFSimplex.wstring___add__(self, *args)
    def __radd__(self, *args): return _pyMCFSimplex.wstring___radd__(self, *args)
    def __str__(self): return _pyMCFSimplex.wstring___str__(self)
    def __rlshift__(self, *args): return _pyMCFSimplex.wstring___rlshift__(self, *args)
    def __eq__(self, *args): return _pyMCFSimplex.wstring___eq__(self, *args)
    def __ne__(self, *args): return _pyMCFSimplex.wstring___ne__(self, *args)
    def __gt__(self, *args): return _pyMCFSimplex.wstring___gt__(self, *args)
    def __lt__(self, *args): return _pyMCFSimplex.wstring___lt__(self, *args)
    def __ge__(self, *args): return _pyMCFSimplex.wstring___ge__(self, *args)
    def __le__(self, *args): return _pyMCFSimplex.wstring___le__(self, *args)
    __swig_destroy__ = _pyMCFSimplex.delete_wstring
    __del__ = lambda self : None;
wstring_swigregister = _pyMCFSimplex.wstring_swigregister
wstring_swigregister(wstring)
cvar = _pyMCFSimplex.cvar
wstring.npos = _pyMCFSimplex.cvar.wstring_npos

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pyMCFSimplex.ios_base_erase_event
    imbue_event = _pyMCFSimplex.ios_base_imbue_event
    copyfmt_event = _pyMCFSimplex.ios_base_copyfmt_event
    def register_callback(self, *args): return _pyMCFSimplex.ios_base_register_callback(self, *args)
    def flags(self, *args): return _pyMCFSimplex.ios_base_flags(self, *args)
    def setf(self, *args): return _pyMCFSimplex.ios_base_setf(self, *args)
    def unsetf(self, *args): return _pyMCFSimplex.ios_base_unsetf(self, *args)
    def precision(self, *args): return _pyMCFSimplex.ios_base_precision(self, *args)
    def width(self, *args): return _pyMCFSimplex.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _pyMCFSimplex.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_pyMCFSimplex.ios_base_sync_with_stdio)
    def imbue(self, *args): return _pyMCFSimplex.ios_base_imbue(self, *args)
    def getloc(self): return _pyMCFSimplex.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _pyMCFSimplex.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_pyMCFSimplex.ios_base_xalloc)
    def iword(self, *args): return _pyMCFSimplex.ios_base_iword(self, *args)
    def pword(self, *args): return _pyMCFSimplex.ios_base_pword(self, *args)
    __swig_destroy__ = _pyMCFSimplex.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _pyMCFSimplex.ios_base_swigregister
ios_base_swigregister(ios_base)
ios_base.boolalpha = _pyMCFSimplex.cvar.ios_base_boolalpha
ios_base.dec = _pyMCFSimplex.cvar.ios_base_dec
ios_base.fixed = _pyMCFSimplex.cvar.ios_base_fixed
ios_base.hex = _pyMCFSimplex.cvar.ios_base_hex
ios_base.internal = _pyMCFSimplex.cvar.ios_base_internal
ios_base.left = _pyMCFSimplex.cvar.ios_base_left
ios_base.oct = _pyMCFSimplex.cvar.ios_base_oct
ios_base.right = _pyMCFSimplex.cvar.ios_base_right
ios_base.scientific = _pyMCFSimplex.cvar.ios_base_scientific
ios_base.showbase = _pyMCFSimplex.cvar.ios_base_showbase
ios_base.showpoint = _pyMCFSimplex.cvar.ios_base_showpoint
ios_base.showpos = _pyMCFSimplex.cvar.ios_base_showpos
ios_base.skipws = _pyMCFSimplex.cvar.ios_base_skipws
ios_base.unitbuf = _pyMCFSimplex.cvar.ios_base_unitbuf
ios_base.uppercase = _pyMCFSimplex.cvar.ios_base_uppercase
ios_base.adjustfield = _pyMCFSimplex.cvar.ios_base_adjustfield
ios_base.basefield = _pyMCFSimplex.cvar.ios_base_basefield
ios_base.floatfield = _pyMCFSimplex.cvar.ios_base_floatfield
ios_base.badbit = _pyMCFSimplex.cvar.ios_base_badbit
ios_base.eofbit = _pyMCFSimplex.cvar.ios_base_eofbit
ios_base.failbit = _pyMCFSimplex.cvar.ios_base_failbit
ios_base.goodbit = _pyMCFSimplex.cvar.ios_base_goodbit
ios_base.app = _pyMCFSimplex.cvar.ios_base_app
ios_base.ate = _pyMCFSimplex.cvar.ios_base_ate
ios_base.binary = _pyMCFSimplex.cvar.ios_base_binary
ios_base.ios_base_in = _pyMCFSimplex.cvar.ios_base_ios_base_in
ios_base.out = _pyMCFSimplex.cvar.ios_base_out
ios_base.trunc = _pyMCFSimplex.cvar.ios_base_trunc
ios_base.beg = _pyMCFSimplex.cvar.ios_base_beg
ios_base.cur = _pyMCFSimplex.cvar.ios_base_cur
ios_base.end = _pyMCFSimplex.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  return _pyMCFSimplex.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _pyMCFSimplex.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _pyMCFSimplex.ios_base_xalloc()
ios_base_xalloc = _pyMCFSimplex.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _pyMCFSimplex.ios_rdstate(self)
    def clear(self, *args): return _pyMCFSimplex.ios_clear(self, *args)
    def setstate(self, *args): return _pyMCFSimplex.ios_setstate(self, *args)
    def good(self): return _pyMCFSimplex.ios_good(self)
    def eof(self): return _pyMCFSimplex.ios_eof(self)
    def fail(self): return _pyMCFSimplex.ios_fail(self)
    def bad(self): return _pyMCFSimplex.ios_bad(self)
    def exceptions(self, *args): return _pyMCFSimplex.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _pyMCFSimplex.ios_tie(self, *args)
    def rdbuf(self, *args): return _pyMCFSimplex.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _pyMCFSimplex.ios_copyfmt(self, *args)
    def fill(self, *args): return _pyMCFSimplex.ios_fill(self, *args)
    def imbue(self, *args): return _pyMCFSimplex.ios_imbue(self, *args)
    def narrow(self, *args): return _pyMCFSimplex.ios_narrow(self, *args)
    def widen(self, *args): return _pyMCFSimplex.ios_widen(self, *args)
ios_swigregister = _pyMCFSimplex.ios_swigregister
ios_swigregister(ios)

class wios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _pyMCFSimplex.wios_rdstate(self)
    def clear(self, *args): return _pyMCFSimplex.wios_clear(self, *args)
    def setstate(self, *args): return _pyMCFSimplex.wios_setstate(self, *args)
    def good(self): return _pyMCFSimplex.wios_good(self)
    def eof(self): return _pyMCFSimplex.wios_eof(self)
    def fail(self): return _pyMCFSimplex.wios_fail(self)
    def bad(self): return _pyMCFSimplex.wios_bad(self)
    def exceptions(self, *args): return _pyMCFSimplex.wios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_wios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_wios
    __del__ = lambda self : None;
    def tie(self, *args): return _pyMCFSimplex.wios_tie(self, *args)
    def rdbuf(self, *args): return _pyMCFSimplex.wios_rdbuf(self, *args)
    def copyfmt(self, *args): return _pyMCFSimplex.wios_copyfmt(self, *args)
    def fill(self, *args): return _pyMCFSimplex.wios_fill(self, *args)
    def imbue(self, *args): return _pyMCFSimplex.wios_imbue(self, *args)
    def narrow(self, *args): return _pyMCFSimplex.wios_narrow(self, *args)
    def widen(self, *args): return _pyMCFSimplex.wios_widen(self, *args)
wios_swigregister = _pyMCFSimplex.wios_swigregister
wios_swigregister(wios)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def length(self): return _pyMCFSimplex.string_length(self)
    def max_size(self): return _pyMCFSimplex.string_max_size(self)
    def capacity(self): return _pyMCFSimplex.string_capacity(self)
    def reserve(self, __res_arg = 0): return _pyMCFSimplex.string_reserve(self, __res_arg)
    def copy(self, *args): return _pyMCFSimplex.string_copy(self, *args)
    def c_str(self): return _pyMCFSimplex.string_c_str(self)
    def find(self, *args): return _pyMCFSimplex.string_find(self, *args)
    def rfind(self, *args): return _pyMCFSimplex.string_rfind(self, *args)
    def find_first_of(self, *args): return _pyMCFSimplex.string_find_first_of(self, *args)
    def find_last_of(self, *args): return _pyMCFSimplex.string_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _pyMCFSimplex.string_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _pyMCFSimplex.string_find_last_not_of(self, *args)
    def substr(self, *args): return _pyMCFSimplex.string_substr(self, *args)
    def empty(self): return _pyMCFSimplex.string_empty(self)
    def size(self): return _pyMCFSimplex.string_size(self)
    def swap(self, *args): return _pyMCFSimplex.string_swap(self, *args)
    def get_allocator(self): return _pyMCFSimplex.string_get_allocator(self)
    def begin(self): return _pyMCFSimplex.string_begin(self)
    def end(self): return _pyMCFSimplex.string_end(self)
    def rbegin(self): return _pyMCFSimplex.string_rbegin(self)
    def rend(self): return _pyMCFSimplex.string_rend(self)
    def erase(self, *args): return _pyMCFSimplex.string_erase(self, *args)
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pyMCFSimplex.string_assign(self, *args)
    def resize(self, *args): return _pyMCFSimplex.string_resize(self, *args)
    def iterator(self): return _pyMCFSimplex.string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyMCFSimplex.string___nonzero__(self)
    def __bool__(self): return _pyMCFSimplex.string___bool__(self)
    def __len__(self): return _pyMCFSimplex.string___len__(self)
    def __getslice__(self, *args): return _pyMCFSimplex.string___getslice__(self, *args)
    def __setslice__(self, *args): return _pyMCFSimplex.string___setslice__(self, *args)
    def __delslice__(self, *args): return _pyMCFSimplex.string___delslice__(self, *args)
    def __delitem__(self, *args): return _pyMCFSimplex.string___delitem__(self, *args)
    def __getitem__(self, *args): return _pyMCFSimplex.string___getitem__(self, *args)
    def __setitem__(self, *args): return _pyMCFSimplex.string___setitem__(self, *args)
    def insert(self, *args): return _pyMCFSimplex.string_insert(self, *args)
    def replace(self, *args): return _pyMCFSimplex.string_replace(self, *args)
    def __iadd__(self, *args): return _pyMCFSimplex.string___iadd__(self, *args)
    def __add__(self, *args): return _pyMCFSimplex.string___add__(self, *args)
    def __radd__(self, *args): return _pyMCFSimplex.string___radd__(self, *args)
    def __str__(self): return _pyMCFSimplex.string___str__(self)
    def __rlshift__(self, *args): return _pyMCFSimplex.string___rlshift__(self, *args)
    def __eq__(self, *args): return _pyMCFSimplex.string___eq__(self, *args)
    def __ne__(self, *args): return _pyMCFSimplex.string___ne__(self, *args)
    def __gt__(self, *args): return _pyMCFSimplex.string___gt__(self, *args)
    def __lt__(self, *args): return _pyMCFSimplex.string___lt__(self, *args)
    def __ge__(self, *args): return _pyMCFSimplex.string___ge__(self, *args)
    def __le__(self, *args): return _pyMCFSimplex.string___le__(self, *args)
    __swig_destroy__ = _pyMCFSimplex.delete_string
    __del__ = lambda self : None;
string_swigregister = _pyMCFSimplex.string_swigregister
string_swigregister(string)
string.npos = _pyMCFSimplex.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _pyMCFSimplex.ostream___lshift__(self, *args)
    def put(self, *args): return _pyMCFSimplex.ostream_put(self, *args)
    def write(self, *args): return _pyMCFSimplex.ostream_write(self, *args)
    def flush(self): return _pyMCFSimplex.ostream_flush(self)
    def tellp(self): return _pyMCFSimplex.ostream_tellp(self)
    def seekp(self, *args): return _pyMCFSimplex.ostream_seekp(self, *args)
ostream_swigregister = _pyMCFSimplex.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog
wcin = cvar.wcin
wcout = cvar.wcout
wcerr = cvar.wcerr
wclog = cvar.wclog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _pyMCFSimplex.istream___rshift__(self, *args)
    def gcount(self): return _pyMCFSimplex.istream_gcount(self)
    def get(self, *args): return _pyMCFSimplex.istream_get(self, *args)
    def getline(self, *args): return _pyMCFSimplex.istream_getline(self, *args)
    def ignore(self, *args): return _pyMCFSimplex.istream_ignore(self, *args)
    def peek(self): return _pyMCFSimplex.istream_peek(self)
    def read(self, *args): return _pyMCFSimplex.istream_read(self, *args)
    def readsome(self, *args): return _pyMCFSimplex.istream_readsome(self, *args)
    def putback(self, *args): return _pyMCFSimplex.istream_putback(self, *args)
    def unget(self): return _pyMCFSimplex.istream_unget(self)
    def sync(self): return _pyMCFSimplex.istream_sync(self)
    def tellg(self): return _pyMCFSimplex.istream_tellg(self)
    def seekg(self, *args): return _pyMCFSimplex.istream_seekg(self, *args)
istream_swigregister = _pyMCFSimplex.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _pyMCFSimplex.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _pyMCFSimplex.endl_cb_ptr

def endl(*args):
  return _pyMCFSimplex.endl(*args)
endl = _pyMCFSimplex.endl
ends_cb_ptr = _pyMCFSimplex.ends_cb_ptr

def ends(*args):
  return _pyMCFSimplex.ends(*args)
ends = _pyMCFSimplex.ends
flush_cb_ptr = _pyMCFSimplex.flush_cb_ptr

def flush(*args):
  return _pyMCFSimplex.flush(*args)
flush = _pyMCFSimplex.flush
class wostream(wios):
    __swig_setmethods__ = {}
    for _s in [wios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wostream, name, value)
    __swig_getmethods__ = {}
    for _s in [wios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_wostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_wostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _pyMCFSimplex.wostream___lshift__(self, *args)
    def put(self, *args): return _pyMCFSimplex.wostream_put(self, *args)
    def write(self, *args): return _pyMCFSimplex.wostream_write(self, *args)
    def flush(self): return _pyMCFSimplex.wostream_flush(self)
    def tellp(self): return _pyMCFSimplex.wostream_tellp(self)
    def seekp(self, *args): return _pyMCFSimplex.wostream_seekp(self, *args)
wostream_swigregister = _pyMCFSimplex.wostream_swigregister
wostream_swigregister(wostream)

class wistream(wios):
    __swig_setmethods__ = {}
    for _s in [wios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wistream, name, value)
    __swig_getmethods__ = {}
    for _s in [wios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wistream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_wistream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_wistream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _pyMCFSimplex.wistream___rshift__(self, *args)
    def gcount(self): return _pyMCFSimplex.wistream_gcount(self)
    def get(self, *args): return _pyMCFSimplex.wistream_get(self, *args)
    def getline(self, *args): return _pyMCFSimplex.wistream_getline(self, *args)
    def ignore(self, *args): return _pyMCFSimplex.wistream_ignore(self, *args)
    def peek(self): return _pyMCFSimplex.wistream_peek(self)
    def read(self, *args): return _pyMCFSimplex.wistream_read(self, *args)
    def readsome(self, *args): return _pyMCFSimplex.wistream_readsome(self, *args)
    def putback(self, *args): return _pyMCFSimplex.wistream_putback(self, *args)
    def unget(self): return _pyMCFSimplex.wistream_unget(self)
    def sync(self): return _pyMCFSimplex.wistream_sync(self)
    def tellg(self): return _pyMCFSimplex.wistream_tellg(self)
    def seekg(self, *args): return _pyMCFSimplex.wistream_seekg(self, *args)
wistream_swigregister = _pyMCFSimplex.wistream_swigregister
wistream_swigregister(wistream)

class wiostream(wistream,wostream):
    __swig_setmethods__ = {}
    for _s in [wistream,wostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiostream, name, value)
    __swig_getmethods__ = {}
    for _s in [wistream,wostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wiostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyMCFSimplex.new_wiostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_wiostream
    __del__ = lambda self : None;
wiostream_swigregister = _pyMCFSimplex.wiostream_swigregister
wiostream_swigregister(wiostream)

wendl_cb_ptr = _pyMCFSimplex.wendl_cb_ptr

def wendl(*args):
  return _pyMCFSimplex.wendl(*args)
wendl = _pyMCFSimplex.wendl
wends_cb_ptr = _pyMCFSimplex.wends_cb_ptr

def wends(*args):
  return _pyMCFSimplex.wends(*args)
wends = _pyMCFSimplex.wends
wflush_cb_ptr = _pyMCFSimplex.wflush_cb_ptr

def wflush(*args):
  return _pyMCFSimplex.wflush(*args)
wflush = _pyMCFSimplex.wflush
USENAME0 = _pyMCFSimplex.USENAME0
class MCFException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCFException, name)
    __repr__ = _swig_repr
    def __init__(self, msg = None): 
        this = _pyMCFSimplex.new_MCFException(msg)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pyMCFSimplex.MCFException_what(self)
    __swig_destroy__ = _pyMCFSimplex.delete_MCFException
    __del__ = lambda self : None;
MCFException_swigregister = _pyMCFSimplex.MCFException_swigregister
MCFException_swigregister(MCFException)

class MCFState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCFState, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyMCFSimplex.new_MCFState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMCFSimplex.delete_MCFState
    __del__ = lambda self : None;
MCFState_swigregister = _pyMCFSimplex.MCFState_swigregister
MCFState_swigregister(MCFState)

class MCFClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCFClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kMaxTime = _pyMCFSimplex.MCFClass_kMaxTime
    kMaxIter = _pyMCFSimplex.MCFClass_kMaxIter
    kEpsFlw = _pyMCFSimplex.MCFClass_kEpsFlw
    kEpsDfct = _pyMCFSimplex.MCFClass_kEpsDfct
    kEpsCst = _pyMCFSimplex.MCFClass_kEpsCst
    kReopt = _pyMCFSimplex.MCFClass_kReopt
    kLastParam = _pyMCFSimplex.MCFClass_kLastParam
    kUnSolved = _pyMCFSimplex.MCFClass_kUnSolved
    kOK = _pyMCFSimplex.MCFClass_kOK
    kStopped = _pyMCFSimplex.MCFClass_kStopped
    kUnfeasible = _pyMCFSimplex.MCFClass_kUnfeasible
    kUnbounded = _pyMCFSimplex.MCFClass_kUnbounded
    kError = _pyMCFSimplex.MCFClass_kError
    kNo = _pyMCFSimplex.MCFClass_kNo
    kYes = _pyMCFSimplex.MCFClass_kYes
    kDimacs = _pyMCFSimplex.MCFClass_kDimacs
    kQDimacs = _pyMCFSimplex.MCFClass_kQDimacs
    kMPS = _pyMCFSimplex.MCFClass_kMPS
    kFWMPS = _pyMCFSimplex.MCFClass_kFWMPS
    def LoadNet(self, nmx = 0, mmx = 0, pn = 0, pm = 0, pU = 0, pC = 0, pDfct = 0, 
    pSn = 0, pEn = 0): return _pyMCFSimplex.MCFClass_LoadNet(self, nmx, mmx, pn, pm, pU, pC, pDfct, pSn, pEn)
    def LoadDMX(self, *args): return _pyMCFSimplex.MCFClass_LoadDMX(self, *args)
    def PreProcess(self): return _pyMCFSimplex.MCFClass_PreProcess(self)
    def SetPar(self, *args): return _pyMCFSimplex.MCFClass_SetPar(self, *args)
    def GetPar(self, *args): return _pyMCFSimplex.MCFClass_GetPar(self, *args)
    def SetMCFTime(self, TimeIt = True): return _pyMCFSimplex.MCFClass_SetMCFTime(self, TimeIt)
    def SolveMCF(self): return _pyMCFSimplex.MCFClass_SolveMCF(self)
    def MCFGetStatus(self): return _pyMCFSimplex.MCFClass_MCFGetStatus(self)
    def MCFGetX(self, *args): return _pyMCFSimplex.MCFClass_MCFGetX(self, *args)
    def HaveNewX(self): return _pyMCFSimplex.MCFClass_HaveNewX(self)
    def MCFGetPi(self, *args): return _pyMCFSimplex.MCFClass_MCFGetPi(self, *args)
    def HaveNewPi(self): return _pyMCFSimplex.MCFClass_HaveNewPi(self)
    def MCFGetRC(self, *args): return _pyMCFSimplex.MCFClass_MCFGetRC(self, *args)
    def MCFGetFO(self): return _pyMCFSimplex.MCFClass_MCFGetFO(self)
    def MCFGetDFO(self): return _pyMCFSimplex.MCFClass_MCFGetDFO(self)
    def MCFGetUnfCut(self, *args): return _pyMCFSimplex.MCFClass_MCFGetUnfCut(self, *args)
    def MCFGetUnbCycl(self, *args): return _pyMCFSimplex.MCFClass_MCFGetUnbCycl(self, *args)
    def TimeMCF(self, *args): return _pyMCFSimplex.MCFClass_TimeMCF(self, *args)
    def CheckPSol(self): return _pyMCFSimplex.MCFClass_CheckPSol(self)
    def CheckDSol(self): return _pyMCFSimplex.MCFClass_CheckDSol(self)
    def MCFnmax(self): return _pyMCFSimplex.MCFClass_MCFnmax(self)
    def MCFmmax(self): return _pyMCFSimplex.MCFClass_MCFmmax(self)
    def MCFn(self): return _pyMCFSimplex.MCFClass_MCFn(self)
    def MCFm(self): return _pyMCFSimplex.MCFClass_MCFm(self)
    def MCFArcs(self, *args): return _pyMCFSimplex.MCFClass_MCFArcs(self, *args)
    def MCFSNde(self, *args): return _pyMCFSimplex.MCFClass_MCFSNde(self, *args)
    def MCFENde(self, *args): return _pyMCFSimplex.MCFClass_MCFENde(self, *args)
    def MCFCosts(self, *args): return _pyMCFSimplex.MCFClass_MCFCosts(self, *args)
    def MCFCost(self, *args): return _pyMCFSimplex.MCFClass_MCFCost(self, *args)
    def MCFQCoef(self, *args): return _pyMCFSimplex.MCFClass_MCFQCoef(self, *args)
    def MCFUCaps(self, *args): return _pyMCFSimplex.MCFClass_MCFUCaps(self, *args)
    def MCFUCap(self, *args): return _pyMCFSimplex.MCFClass_MCFUCap(self, *args)
    def MCFDfcts(self, *args): return _pyMCFSimplex.MCFClass_MCFDfcts(self, *args)
    def MCFDfct(self, *args): return _pyMCFSimplex.MCFClass_MCFDfct(self, *args)
    def WriteMCF(self, *args): return _pyMCFSimplex.MCFClass_WriteMCF(self, *args)
    def ChgCosts(self, *args): return _pyMCFSimplex.MCFClass_ChgCosts(self, *args)
    def ChgCost(self, *args): return _pyMCFSimplex.MCFClass_ChgCost(self, *args)
    def ChgQCoef(self, *args): return _pyMCFSimplex.MCFClass_ChgQCoef(self, *args)
    def ChgUCaps(self, *args): return _pyMCFSimplex.MCFClass_ChgUCaps(self, *args)
    def ChgUCap(self, *args): return _pyMCFSimplex.MCFClass_ChgUCap(self, *args)
    def ChgDfcts(self, *args): return _pyMCFSimplex.MCFClass_ChgDfcts(self, *args)
    def ChgDfct(self, *args): return _pyMCFSimplex.MCFClass_ChgDfct(self, *args)
    def CloseArc(self, *args): return _pyMCFSimplex.MCFClass_CloseArc(self, *args)
    def IsClosedArc(self, *args): return _pyMCFSimplex.MCFClass_IsClosedArc(self, *args)
    def DelNode(self, *args): return _pyMCFSimplex.MCFClass_DelNode(self, *args)
    def OpenArc(self, *args): return _pyMCFSimplex.MCFClass_OpenArc(self, *args)
    def AddNode(self, *args): return _pyMCFSimplex.MCFClass_AddNode(self, *args)
    def ChangeArc(self, *args): return _pyMCFSimplex.MCFClass_ChangeArc(self, *args)
    def DelArc(self, *args): return _pyMCFSimplex.MCFClass_DelArc(self, *args)
    def IsDeletedArc(self, *args): return _pyMCFSimplex.MCFClass_IsDeletedArc(self, *args)
    def AddArc(self, *args): return _pyMCFSimplex.MCFClass_AddArc(self, *args)
    __swig_destroy__ = _pyMCFSimplex.delete_MCFClass
    __del__ = lambda self : None;
MCFClass_swigregister = _pyMCFSimplex.MCFClass_swigregister
MCFClass_swigregister(MCFClass)

QUADRATICCOST = _pyMCFSimplex.QUADRATICCOST
class MCFSimplex(MCFClass):
    __swig_setmethods__ = {}
    for _s in [MCFClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFSimplex, name, value)
    __swig_getmethods__ = {}
    for _s in [MCFClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCFSimplex, name)
    __repr__ = _swig_repr
    kAlgPrimal = _pyMCFSimplex.MCFSimplex_kAlgPrimal
    kAlgPricing = _pyMCFSimplex.MCFSimplex_kAlgPricing
    kNumCandList = _pyMCFSimplex.MCFSimplex_kNumCandList
    kHotListSize = _pyMCFSimplex.MCFSimplex_kHotListSize
    kRecomputeFOLimits = _pyMCFSimplex.MCFSimplex_kRecomputeFOLimits
    kEpsOpt = _pyMCFSimplex.MCFSimplex_kEpsOpt
    kDantzig = _pyMCFSimplex.MCFSimplex_kDantzig
    kFirstEligibleArc = _pyMCFSimplex.MCFSimplex_kFirstEligibleArc
    kCandidateListPivot = _pyMCFSimplex.MCFSimplex_kCandidateListPivot
    def __init__(self, nmx = 0, mmx = 0): 
        this = _pyMCFSimplex.new_MCFSimplex(nmx, mmx)
        try: self.this.append(this)
        except: self.this = this
    def LoadNet(self, nmx = 0, mmx = 0, pn = 0, pm = 0, pU = 0, pC = 0, pDfct = 0, 
    pSn = 0, pEn = 0): return _pyMCFSimplex.MCFSimplex_LoadNet(self, nmx, mmx, pn, pm, pU, pC, pDfct, pSn, pEn)
    def SetAlg(self, *args): return _pyMCFSimplex.MCFSimplex_SetAlg(self, *args)
    def SetPar(self, *args): return _pyMCFSimplex.MCFSimplex_SetPar(self, *args)
    def SolveMCF(self): return _pyMCFSimplex.MCFSimplex_SolveMCF(self)
    def MCFGetX(self, *args): return _pyMCFSimplex.MCFSimplex_MCFGetX(self, *args)
    def MCFGetRC(self, *args): return _pyMCFSimplex.MCFSimplex_MCFGetRC(self, *args)
    def MCFGetPi(self, *args): return _pyMCFSimplex.MCFSimplex_MCFGetPi(self, *args)
    def MCFGetFO(self): return _pyMCFSimplex.MCFSimplex_MCFGetFO(self)
    def MCFArcs(self, *args): return _pyMCFSimplex.MCFSimplex_MCFArcs(self, *args)
    def MCFSNde(self, *args): return _pyMCFSimplex.MCFSimplex_MCFSNde(self, *args)
    def MCFENde(self, *args): return _pyMCFSimplex.MCFSimplex_MCFENde(self, *args)
    def MCFCosts(self, *args): return _pyMCFSimplex.MCFSimplex_MCFCosts(self, *args)
    def MCFCost(self, *args): return _pyMCFSimplex.MCFSimplex_MCFCost(self, *args)
    def MCFQCoef(self, *args): return _pyMCFSimplex.MCFSimplex_MCFQCoef(self, *args)
    def MCFUCaps(self, *args): return _pyMCFSimplex.MCFSimplex_MCFUCaps(self, *args)
    def MCFUCap(self, *args): return _pyMCFSimplex.MCFSimplex_MCFUCap(self, *args)
    def MCFDfcts(self, *args): return _pyMCFSimplex.MCFSimplex_MCFDfcts(self, *args)
    def MCFDfct(self, *args): return _pyMCFSimplex.MCFSimplex_MCFDfct(self, *args)
    def ChgCosts(self, *args): return _pyMCFSimplex.MCFSimplex_ChgCosts(self, *args)
    def ChgCost(self, *args): return _pyMCFSimplex.MCFSimplex_ChgCost(self, *args)
    def ChgQCoef(self, *args): return _pyMCFSimplex.MCFSimplex_ChgQCoef(self, *args)
    def ChgDfcts(self, *args): return _pyMCFSimplex.MCFSimplex_ChgDfcts(self, *args)
    def ChgDfct(self, *args): return _pyMCFSimplex.MCFSimplex_ChgDfct(self, *args)
    def ChgUCaps(self, *args): return _pyMCFSimplex.MCFSimplex_ChgUCaps(self, *args)
    def ChgUCap(self, *args): return _pyMCFSimplex.MCFSimplex_ChgUCap(self, *args)
    def CloseArc(self, *args): return _pyMCFSimplex.MCFSimplex_CloseArc(self, *args)
    def DelNode(self, *args): return _pyMCFSimplex.MCFSimplex_DelNode(self, *args)
    def IsClosedArc(self, *args): return _pyMCFSimplex.MCFSimplex_IsClosedArc(self, *args)
    def OpenArc(self, *args): return _pyMCFSimplex.MCFSimplex_OpenArc(self, *args)
    def AddNode(self, *args): return _pyMCFSimplex.MCFSimplex_AddNode(self, *args)
    def ChangeArc(self, *args): return _pyMCFSimplex.MCFSimplex_ChangeArc(self, *args)
    def DelArc(self, *args): return _pyMCFSimplex.MCFSimplex_DelArc(self, *args)
    def AddArc(self, *args): return _pyMCFSimplex.MCFSimplex_AddArc(self, *args)
    def IsDeletedArc(self, *args): return _pyMCFSimplex.MCFSimplex_IsDeletedArc(self, *args)
    __swig_destroy__ = _pyMCFSimplex.delete_MCFSimplex
    __del__ = lambda self : None;
MCFSimplex_swigregister = _pyMCFSimplex.MCFSimplex_swigregister
MCFSimplex_swigregister(MCFSimplex)

# This file is compatible with both classic and new-style classes.


